def test_psnr(compute_psnr):
    import numpy as np
    
    img_pred = np.array([[1, 2, 3],
               [4, 5, 6],
               [7, 8, 9]])

    img_gt = np.array([[1, 2, 3],
             [4, 0, 6],
             [7, 8, 9]])
    
    assert compute_psnr(img_pred, img_gt) == 43.69382882343973
    print("---------------")
    print("OK, + 0.5 баллов")
    
    
def test_inv(inv):
    import numpy as np
    
    test = np.array([[10, 1, 100],
                     [1, 2, 3  ],
                     [5, 10, 10]])

    ans = np.array([[0.1, 0,   0.01],
                    [0,   0,   0   ],
                    [0,   0.1, 0.1]])
    
    assert np.max(inv(test, threshold=5) - ans) < 1e-6
    print("---------------")
    print("OK, + 0.5 баллов")    
    
    
def test_H(get_H):
    import numpy as np
    
    h = np.array([[1]])
    shape = [3, 3]

    ans = np.array([[1, 1, 1],
                    [1, 1, 1],
                    [1, 1, 1]], dtype=np.complex64)
    
    assert np.max(np.abs(get_H(h, shape) - ans)) < 1e-6
                  
    ans = np.array([[4.+0.j, 2.-2.j, 0.+0.j, 2.+2.j],
                    [2.-2.j, 0.-2.j, 0.+0.j, 2.+0.j],
                    [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
                    [2.+2.j, 2.+0.j, 0.+0.j, 0.+2.j]])
                  
    shape = [4, 4]
    h = np.array([[1, 1], [1, 1]])
    assert np.max(np.abs(get_H(h, shape) - ans)) < 1e-6
    
    print("---------------")
    print("OK, + 0.5 баллов")    
    
    
def test_wf_2(filtering_img, compute_psnr):
    import numpy as np
        
    noisy_img = np.load('source/examples/noisy.npy')
    img = np.load('source/examples/original.npy')
    assert compute_psnr(filtering_img, img) - compute_psnr(noisy_img, img) > 8.0
    print("---------------")
    print("OK, + 0.5 баллов")
    
    
def test_gaussian(G_kernel):
    import numpy as np
    ans = []
    sigma = []
    size = []

    sigma.append(10)
    size.append(2)
    ans.append([[0.24875157, 0.24999844],
                [0.24999844, 0.25125156]])

    sigma.append(1)
    size.append(5)
    ans.append([[0.00296902, 0.01330621, 0.02193823, 0.01330621, 0.00296902],
                [0.01330621, 0.0596343,  0.09832033, 0.0596343,  0.01330621],
                [0.02193823, 0.09832033, 0.16210282, 0.09832033, 0.02193823],
                [0.01330621, 0.0596343,  0.09832033, 0.0596343,  0.01330621],
                [0.00296902, 0.01330621, 0.02193823, 0.01330621, 0.00296902]])

    ans = list(map(np.array, ans))
    for i in range(len(ans)):
        assert G_kernel(size[i], sigma[i]).shape == ans[i].shape
        assert np.max(np.abs(G_kernel(size[i], sigma[i]) - ans[i])) < 1e-6
        
    print("---------------")
    print("OK, + 1 балл")
    

def test_if(invere_filtering):
    import numpy as np
    img = np.array([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]])
    h = np.array([[1]])
    threshold = 0
    assert np.max(np.abs(invere_filtering(img, h, threshold) - img)) < 1e-6
    
    img = np.load('source/examples/blured.npy')
    h =   np.array([[0.00119286, 0.00154706, 0.00192776, 0.00230794, 0.00265477,
                    0.00293397, 0.0031154 , 0.00317833, 0.0031154 , 0.00293397,
                    0.00265477, 0.00230794, 0.00192776, 0.00154706, 0.00119286],
                   [0.00154706, 0.00200643, 0.00250017, 0.00299324, 0.00344305,
                    0.00380516, 0.00404045, 0.00412208, 0.00404045, 0.00380516,
                    0.00344305, 0.00299324, 0.00250017, 0.00200643, 0.00154706],
                   [0.00192776, 0.00250017, 0.0031154 , 0.00372981, 0.0042903 ,
                    0.00474152, 0.00503472, 0.00513642, 0.00503472, 0.00474152,
                    0.0042903 , 0.00372981, 0.0031154 , 0.00250017, 0.00192776],
                   [0.00230794, 0.00299324, 0.00372981, 0.00446539, 0.00513642,
                    0.00567663, 0.00602765, 0.00614942, 0.00602765, 0.00567663,
                    0.00513642, 0.00446539, 0.00372981, 0.00299324, 0.00230794],
                   [0.00265477, 0.00344305, 0.0042903 , 0.00513642, 0.00590829,
                    0.00652967, 0.00693345, 0.00707351, 0.00693345, 0.00652967,
                    0.00590829, 0.00513642, 0.0042903 , 0.00344305, 0.00265477],
                   [0.00293397, 0.00380516, 0.00474152, 0.00567663, 0.00652967,
                    0.00721641, 0.00766264, 0.00781744, 0.00766264, 0.00721641,
                    0.00652967, 0.00567663, 0.00474152, 0.00380516, 0.00293397],
                   [0.0031154 , 0.00404045, 0.00503472, 0.00602765, 0.00693345,
                    0.00766264, 0.00813648, 0.00830084, 0.00813648, 0.00766264,
                    0.00693345, 0.00602765, 0.00503472, 0.00404045, 0.0031154 ],
                   [0.00317833, 0.00412208, 0.00513642, 0.00614942, 0.00707351,
                    0.00781744, 0.00830084, 0.00846853, 0.00830084, 0.00781744,
                    0.00707351, 0.00614942, 0.00513642, 0.00412208, 0.00317833],
                   [0.0031154 , 0.00404045, 0.00503472, 0.00602765, 0.00693345,
                    0.00766264, 0.00813648, 0.00830084, 0.00813648, 0.00766264,
                    0.00693345, 0.00602765, 0.00503472, 0.00404045, 0.0031154 ],
                   [0.00293397, 0.00380516, 0.00474152, 0.00567663, 0.00652967,
                    0.00721641, 0.00766264, 0.00781744, 0.00766264, 0.00721641,
                    0.00652967, 0.00567663, 0.00474152, 0.00380516, 0.00293397],
                   [0.00265477, 0.00344305, 0.0042903 , 0.00513642, 0.00590829,
                    0.00652967, 0.00693345, 0.00707351, 0.00693345, 0.00652967,
                    0.00590829, 0.00513642, 0.0042903 , 0.00344305, 0.00265477],
                   [0.00230794, 0.00299324, 0.00372981, 0.00446539, 0.00513642,
                    0.00567663, 0.00602765, 0.00614942, 0.00602765, 0.00567663,
                    0.00513642, 0.00446539, 0.00372981, 0.00299324, 0.00230794],
                   [0.00192776, 0.00250017, 0.0031154 , 0.00372981, 0.0042903 ,
                    0.00474152, 0.00503472, 0.00513642, 0.00503472, 0.00474152,
                    0.0042903 , 0.00372981, 0.0031154 , 0.00250017, 0.00192776],
                   [0.00154706, 0.00200643, 0.00250017, 0.00299324, 0.00344305,
                    0.00380516, 0.00404045, 0.00412208, 0.00404045, 0.00380516,
                    0.00344305, 0.00299324, 0.00250017, 0.00200643, 0.00154706],
                   [0.00119286, 0.00154706, 0.00192776, 0.00230794, 0.00265477,
                    0.00293397, 0.0031154 , 0.00317833, 0.0031154 , 0.00293397,
                    0.00265477, 0.00230794, 0.00192776, 0.00154706, 0.00119286]])
    
    restored = invere_filtering(img, h) 
    original = np.load('source/examples/original.npy')
    mse = np.mean((restored - original)**2)
    assert mse < 1e-4
    print("---------------")
    print("OK, + 1 балл")    
    

def test_wf(wiener_filtering):
    import numpy as np
    img = np.array([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]])
    h = np.array([[1]])
    assert np.max(np.abs(wiener_filtering(img, h, K=0) - img)) < 1e-6
    
    blured = np.array([[0.4, 0.4, 0.6],
                       [0.4, 0.4, 0.6],
                       [0.6, 0.6, 1. ]])
                  
    h = np.array([[0,   0.2,   0], 
                  [0.2, 0.2, 0.2], 
                  [0,   0.2,   0]])
                  
    img = np.array([[0, 1, 0], 
                    [1, 1, 1], 
                    [0, 1, 0]])
                  
    assert np.max(np.abs(wiener_filtering(blured, h, K=0) - img)) < 1e-6
    print("---------------")
    print("OK, + 1 балл")    
